FROM ubuntu:16.04
LABEL maintainer="Gigantum <hello@gigantum.io>"

# Install system level dependencies
RUN apt-get -y update && apt-get -y --no-install-recommends install build-essential git nginx supervisor wget openssl \
ca-certificates bzip2 gosu redis-server software-properties-common curl

# install git lfs
RUN add-apt-repository ppa:git-core/ppa && apt-get -y update
RUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && apt-get -y install git-lfs

# Setup ElasticSearch 
RUN apt-get -y install apt-transport-https openjdk-8-jre openjdk-8-jdk 
RUN wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add - 
RUN echo "deb https://artifacts.elastic.co/packages/5.x/apt stable main" | tee -a /etc/apt/sources.list.d/elastic-5.x.list 
RUN apt-get -y update && apt-get -y install elasticsearch  

# Install conda
ENV CONDA_DIR=/opt/conda \
    SHELL=/bin/bash \
    MINICONDA_VERSION=4.3.31 \
    LC_ALL=C.UTF-8 \
    LANG=C.UTF-8
ENV PATH=$CONDA_DIR/bin:$PATH

RUN cd /tmp && wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \
echo "7fe70b214bee1143e3e3f0467b71453c *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh" | md5sum -c - && \
/bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR && \
rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \
$CONDA_DIR/bin/conda config --system --prepend channels conda-forge && \
$CONDA_DIR/bin/conda config --system --set auto_update_conda false && \
$CONDA_DIR/bin/conda config --system --set show_channel_urls true && \
$CONDA_DIR/bin/conda update --all --quiet --yes && \
$CONDA_DIR/bin/conda create --quiet --yes -n py27 python=2.7 anaconda && \
$CONDA_DIR/bin/conda create --quiet --yes -n py36 python=3.6 anaconda && \
$CONDA_DIR/bin/conda clean -tpsy

# Copy LabManager Package
COPY submodules/labmanager-common /opt/labmanager-common
COPY submodules/labmanager-service-labbook /opt/labmanager-service-labbook

# Install lmcommon
RUN cd /opt/labmanager-common/ && \
$CONDA_DIR/bin/pip install -r /opt/labmanager-common/requirements.txt && \
$CONDA_DIR/bin/python setup.py install

# Setup lmcommon config file - should be written by automation before copy
COPY labmanager_resources/labmanager-config.yaml /etc/gigantum/labmanager.yaml

# Setup logging config file
COPY submodules/labmanager-common/lmcommon/logging/logging.json.default /etc/gigantum/logging.json

# Make needed directories
RUN mkdir -p /mnt/gigantum && mkdir /opt/redis

# Install API deps
RUN $CONDA_DIR/bin/pip install -r /opt/labmanager-service-labbook/requirements.txt && \
$CONDA_DIR/bin/pip install uwsgi

# Copy frontend
COPY submodules/labmanager-ui/build/ /var/www/

# Setup NGINX/uWSGI
COPY labmanager_resources/nginx_ui.conf /etc/nginx/sites-enabled/
COPY labmanager_resources/nginx_api.conf /etc/nginx/sites-enabled/
RUN rm /etc/nginx/sites-enabled/default

# Setup Redis
COPY labmanager_resources/redis.conf /opt/redis/redis.conf

# Setup Supervisord to launch both uwsgi and nginx
RUN mkdir -p /opt/log/supervisor && mkdir -p /opt/log/nginx && mkdir -p /opt/run && mkdir -p /opt/nginx && nginx && nginx -s reload && nginx -s quit
COPY labmanager_resources/supervisord_base.conf /etc/supervisor/supervisord.conf
COPY labmanager_resources/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

COPY labmanager_resources/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod u+x /usr/local/bin/entrypoint.sh

# Setup demo labbook
COPY awful-intersections-demo.lbk /opt/awful-intersections-demo.lbk

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Expose Ports
EXPOSE 10000
EXPOSE 10001

# Start by firing up uwsgi, nginx, redis, and workers via supervisord
CMD ["/usr/bin/supervisord", "--nodaemon"]
